<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"
       default-autowire="byName">

    <!-- quartz线程池 -->
    <bean id="quartzThreadPool" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <!-- 核心线程数  -->
        <property name="corePoolSize" value="100"/>
        <!-- 最大线程数 -->
        <property name="maxPoolSize" value="200"/>
        <!-- 队列最大长度 >=mainExecutor.maxSize -->
        <property name="queueCapacity" value="1000"/>
        <!-- 线程池维护线程所允许的空闲时间 -->
        <property name="keepAliveSeconds" value="300"/>
        <!-- 拒绝任务策略:被拒绝后直接在调用者线程中运行当前被放弃任务 -->
        <property name="rejectedExecutionHandler">
            <bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy"/>
        </property>
    </bean>

    <!-- 分布式QuartzScheduler -->
    <bean name="clusterScheduler" lazy-init="false" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="dataSource" ref="dataSource"></property> <!-- datasource引入 -->
        <property name="taskExecutor" ref="quartzThreadPool"/>
        <property name="transactionManager" ref="transactionManager"/><!-- transactionManager引入 -->
        <property name="quartzProperties">
            <props>
                <prop key="org.quartz.scheduler.instanceName">CacheCloudScheduler</prop>
                <prop key="org.quartz.scheduler.instanceId">AUTO</prop>
                <prop key="org.quartz.jobStore.class">org.quartz.impl.jdbcjobstore.JobStoreTX</prop>
                <prop key="org.quartz.jobStore.driverDelegateClass">org.quartz.impl.jdbcjobstore.StdJDBCDelegate</prop>
                <prop key="org.quartz.jobStore.tablePrefix">CACHE_QRTZ_</prop><!-- 表名前缀 -->
                <prop key="org.quartz.jobStore.isClustered">${isClustered}</prop>
                <prop key="org.quartz.jobStore.clusterCheckinInterval">15000</prop>
                <prop key="org.quartz.jobStore.maxMisfiresToHandleAtATime">120</prop>
                <prop key="org.quartz.jobStore.misfireThreshold">60000</prop>
                <prop key="org.quartz.scheduler.jmx.export">true</prop><!-- 打开JMX 配置 -->
                <prop key="org.quartz.plugin.shutdownHook.class">org.quartz.plugins.management.ShutdownHookPlugin</prop>
                <prop key="org.quartz.plugin.shutdownHook.cleanShutdown">true</prop>
                <prop key="org.terracotta.quartz.skipUpdateCheck">true</prop>
                <prop key="org.quartz.plugin.triggHistory.class">org.quartz.plugins.history.LoggingJobHistoryPlugin</prop>
            </props>
        </property>
        <property name="schedulerName" value="CacheCloudScheduler"/>
        <property name="applicationContextSchedulerContextKey" value="applicationContext"/>
        <property name="overwriteExistingJobs" value="true"/>
        <property name="waitForJobsToCompleteOnShutdown" value="false"/>
        <property name="startupDelay" value="0"/>
        <property name="autoStartup" value="true"/>
        <property name="triggers">
            <array>
                <ref bean="testQuarzClusterTrigger"/>
            </array>
        </property>
        <property name="jobDetails">
            <array>
                <ref bean="testQuarzClusterJobDetail"/>
                <ref bean="customJobDetail"/>
            </array>
        </property>
    </bean>

    <!-- start 每隔1分钟 -->
    <bean id="testQuarzClusterTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="name" value="testQuarzClusterTrigger"/>
        <property name="group" value="testQuarzCluster"/>
        <property name="jobDetail" ref="testQuarzClusterJobDetail"/>
        <property name="cronExpression" value="0 */1 * * * ?"/>
    </bean>
    <bean id="testQuarzClusterJobDetail" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <property name="name" value="instanceStatusJob"></property>
        <property name="group" value="instance"></property>
        <property name="jobClass" value="test.定时任务.demo01.TestQuartzCluster"></property>
        <property name="requestsRecovery" value="true" /><!-- spring-context-support 3.2.8.RELEASE支持,低版本可能报错 -->
        <property name="durability" value="true"/>
    </bean>
    <!-- end 每隔1分钟 -->

    <!-- start customJob -->
    <!-- [只创建JobDetail,Trigger在QuartzManager中管理,实现动态][JobDetail也可以在QuartzManager中实现] -->
    <bean id="customJobDetail" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <property name="name" value="customJob_name"></property>
        <property name="group" value="customJob_group"></property>
        <property name="jobClass" value="test.定时任务.demo01.CustomQuartzJob"></property>
        <property name="requestsRecovery" value="true"/>
        <property name="durability" value="true"/>
    </bean>
    <!-- end customJob -->

    <!--quartz定时任务管理类 -->
    <bean id="quartzManager" class="test.定时任务.demo01.QuartzManager" init-method="init" />

</beans>